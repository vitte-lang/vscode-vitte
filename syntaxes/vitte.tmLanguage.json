{
  "name": "Vitte",
  "scopeName": "source.vitte",
  "fileTypes": ["vitte", "vit"],
  "foldingStartMarker": "\\{\\s*$|\\(\\s*$|\\[\\s*$|^\\s*//\\s*#?region\\b",
  "foldingStopMarker": "^\\s*\\}|^\\s*\\)|^\\s*\\]|^\\s*//\\s*#?endregion\\b",
  "patterns": [
    { "include": "#shebang" },
    { "include": "#doc-comments" },
    { "include": "#comments" },
    { "include": "#attributes" },
    { "include": "#imports" },
    { "include": "#declarations" },
    { "include": "#strings" },
    { "include": "#chars" },
    { "include": "#numbers" },
    { "include": "#keywords" },
    { "include": "#types" },
    { "include": "#constants" },
    { "include": "#struct-def" },
    { "include": "#enum-def" },
    { "include": "#impl-block" },
    { "include": "#function-def" },
    { "include": "#function-call" },
    { "include": "#generics" },
    { "include": "#operators" }
  ],
  "repository": {
    "shebang": {
      "patterns": [
        { "name": "comment.line.shebang.vitte", "match": "^#!.*$" }
      ]
    },
    "doc-comments": {
      "patterns": [
        { "name": "comment.line.documentation.vitte", "match": "^\\s*//!.*$" },
        { "name": "comment.line.documentation.vitte", "match": "^\\s*///.*$" },
        {
          "name": "comment.block.documentation.vitte",
          "begin": "/\\*\\*",
          "end": "\\*/",
          "patterns": [{ "include": "#todo-notes" }]
        }
      ]
    },
    "comments": {
      "patterns": [
        { "name": "comment.line.double-slash.vitte", "match": "//.*$",
          "patterns": [{ "include": "#todo-notes" }] },
        {
          "name": "comment.block.vitte",
          "begin": "/\\*",
          "end": "\\*/",
          "patterns": [{ "include": "#comments" }, { "include": "#todo-notes" }]
        }
      ]
    },
    "todo-notes": {
      "patterns": [
        { "name": "keyword.other.todo.vitte", "match": "\\b(TODO|FIXME|HACK|BUG|NOTE)\\b" }
      ]
    },
    "attributes": {
      "patterns": [
        { "name": "meta.annotation.vitte", "match": "@[A-Za-z_][A-Za-z0-9_:-]*" },
        {
          "name": "meta.annotation.parameters.vitte",
          "begin": "(@[A-Za-z_][A-Za-z0-9_:-]*)\\s*\\(",
          "beginCaptures": { "1": { "name": "meta.annotation.vitte" } },
          "end": "\\)",
          "patterns": [
            { "include": "#strings" },
            { "include": "#numbers" },
            { "include": "#constants" }
          ]
        }
      ]
    },
    "imports": {
      "patterns": [
        {
          "name": "meta.import.vitte",
          "begin": "\\buse\\s+",
          "beginCaptures": { "0": { "name": "keyword.other.import.vitte" } },
          "end": "$",
          "patterns": [
            {
              "name": "entity.name.namespace.vitte",
              "match": "[A-Za-z_][A-Za-z0-9_]*"
            },
            { "name": "punctuation.separator.namespace.vitte", "match": "::" },
            { "name": "punctuation.separator.comma.vitte", "match": "," },
            { "name": "punctuation.section.group.vitte", "match": "[\\{\\}]" },
            { "include": "#comments" }
          ]
        }
      ]
    },
    "declarations": {
      "patterns": [
        {
          "name": "meta.binding.let.vitte",
          "match": "\\blet\\s+(?:mut\\s+)?([A-Za-z_][A-Za-z0-9_]*)",
          "captures": {
            "0": { "name": "keyword.declaration.variable.vitte" },
            "1": { "name": "variable.other.readwrite.vitte" }
          }
        },
        {
          "name": "meta.constant.vitte",
          "match": "\\bconst\\s+([A-Z][A-Z0-9_]+)",
          "captures": {
            "0": { "name": "keyword.declaration.constant.vitte" },
            "1": { "name": "variable.other.constant.vitte" }
          }
        },
        {
          "name": "meta.typealias.vitte",
          "begin": "\\btype\\s+([A-Za-z_][A-Za-z0-9_]*)",
          "beginCaptures": {
            "0": { "name": "keyword.declaration.type.vitte" },
            "1": { "name": "entity.name.type.vitte" }
          },
          "end": "$",
          "patterns": [{ "include": "#types" }, { "include": "#generics" }]
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.double.vitte",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            { "name": "constant.character.escape.vitte", "match": "\\\\(x[0-9A-Fa-f]{2}|u\\{[0-9A-Fa-f]+\\}|n|t|r|\"|\\\\)" }
          ]
        },
        {
          "name": "string.quoted.raw.vitte",
          "match": "r#*\"[\\s\\S]*?\"#*"
        }
      ]
    },
    "chars": {
      "patterns": [
        {
          "name": "constant.character.vitte",
          "match": "'(?:[^'\\\\]|\\\\[nrt'\"\\\\xX0-9uU\\{\\}])+?'"
        }
      ]
    },
    "numbers": {
      "patterns": [
        { "name": "constant.numeric.hex.vitte", "match": "\\b0x[0-9A-Fa-f_]+\\b" },
        { "name": "constant.numeric.oct.vitte", "match": "\\b0o[0-7_]+\\b" },
        { "name": "constant.numeric.bin.vitte", "match": "\\b0b[01_]+\\b" },
        { "name": "constant.numeric.float.vitte", "match": "\\b\\d[\\d_]*\\.\\d[\\d_]*(?:[eE][+-]?\\d+)?\\b" },
        { "name": "constant.numeric.dec.vitte", "match": "\\b\\d[\\d_]*(?:[eE][+-]?\\d+)?\\b" }
      ]
    },
    "keywords": {
      "patterns": [
        { "name": "keyword.control.vitte", "match": "\\b(if|else|for|while|match|return|break|continue|loop|in)\\b" },
        { "name": "keyword.declaration.vitte", "match": "\\b(do|let|const|mut|use|module|pub|type|struct|enum|trait|impl|extern|async|await|spawn)\\b" },
        { "name": "storage.modifier.vitte", "match": "\\b(pub|extern|mut|const)\\b" }
      ]
    },
    "types": {
      "patterns": [
        { "name": "support.type.primitive.vitte", "match": "\\b(i8|i16|i32|i64|isize|u8|u16|u32|u64|usize|f32|f64|bool|char|Unit|String|str)\\b" },
        { "name": "support.type.std.vitte", "match": "\\b(Vec|Map|Set|Result|Option|Uuid|Response|Sender|Receiver|Path)\\b" },
        { "name": "entity.name.type.vitte", "match": "\\b[A-Z][A-Za-z0-9_]*\\b" }
      ]
    },
    "constants": {
      "patterns": [
        { "name": "constant.language.boolean.vitte", "match": "\\b(true|false)\\b" },
        { "name": "constant.language.null.vitte", "match": "\\bnull\\b" },
        { "name": "constant.language.unit.vitte", "match": "\\bUnit\\b" }
      ]
    },
    "struct-def": {
      "patterns": [
        {
          "name": "meta.struct.vitte",
          "begin": "\\bstruct\\s+([A-Za-z_][A-Za-z0-9_]*)\\s*\\{",
          "beginCaptures": {
            "0": { "name": "keyword.declaration.struct.vitte" },
            "1": { "name": "entity.name.type.struct.vitte" }
          },
          "end": "\\}",
          "patterns": [
            {
              "name": "meta.struct.member.vitte",
              "match": "([A-Za-z_][A-Za-z0-9_]*)\\s*:\\s*",
              "captures": { "1": { "name": "variable.other.member.vitte" } }
            },
            { "include": "#types" },
            { "include": "#generics" },
            { "include": "#comments" },
            { "include": "#strings" }
          ]
        }
      ]
    },
    "enum-def": {
      "patterns": [
        {
          "name": "meta.enum.vitte",
          "begin": "\\benum\\s+([A-Za-z_][A-Za-z0-9_]*)\\s*\\{",
          "beginCaptures": {
            "0": { "name": "keyword.declaration.enum.vitte" },
            "1": { "name": "entity.name.type.enum.vitte" }
          },
          "end": "\\}",
          "patterns": [
            { "name": "entity.name.variant.vitte", "match": "\\b[A-Za-z_][A-Za-z0-9_]*\\b" },
            { "include": "#types" },
            { "include": "#generics" },
            { "include": "#comments" }
          ]
        }
      ]
    },
    "impl-block": {
      "patterns": [
        {
          "name": "meta.impl.vitte",
          "begin": "\\bimpl\\s+([A-Za-z_][A-Za-z0-9_]*)\\s*\\{",
          "beginCaptures": {
            "0": { "name": "keyword.declaration.impl.vitte" },
            "1": { "name": "entity.name.type.vitte" }
          },
          "end": "\\}",
          "patterns": [
            { "include": "#function-def" },
            { "include": "#comments" }
          ]
        }
      ]
    },
    "function-def": {
      "patterns": [
        {
          "name": "meta.function.vitte",
          "begin": "\\bdo\\s+([A-Za-z_][A-Za-z0-9_]*)\\s*\\(",
          "beginCaptures": { "1": { "name": "entity.name.function.vitte" } },
          "end": "\\)\\s*",
          "patterns": [
            { "include": "#strings" },
            { "include": "#numbers" },
            { "include": "#types" },
            { "include": "#generics" },
            { "include": "#operators" },
            {
              "name": "variable.parameter.vitte",
              "match": "\\b([A-Za-z_][A-Za-z0-9_]*)\\s*:"
            }
          ]
        },
        {
          "name": "meta.function.signature.remainder.vitte",
          "begin": "\\)\\s*(->)\\s*",
          "beginCaptures": { "1": { "name": "keyword.operator.arrow.vitte" } },
          "end": "(?=\\{|$)",
          "patterns": [
            { "include": "#types" },
            { "include": "#generics" }
          ]
        }
      ]
    },
    "function-call": {
      "patterns": [
        {
          "name": "meta.function-call.vitte",
          "match": "\\b([a-z_][A-Za-z0-9_]*)\\s*(?=\\()",
          "captures": { "1": { "name": "support.function.vitte" } }
        }
      ]
    },
    "generics": {
      "patterns": [
        {
          "name": "meta.generic.vitte",
          "begin": "([A-Za-z_][A-Za-z0-9_]*)\\s*\\[",
          "beginCaptures": { "1": { "name": "entity.name.type.vitte" } },
          "end": "\\]",
          "patterns": [
            { "include": "#types" },
            { "name": "punctuation.separator.comma.vitte", "match": "," },
            { "include": "#generics" }
          ]
        }
      ]
    },
    "operators": {
      "patterns": [
        { "name": "keyword.operator.comparison.vitte", "match": "(==|!=|<=|>=|<|>)" },
        { "name": "keyword.operator.logical.vitte", "match": "(\\&\\&|\\|\\| |!)(?=\\s|\\()" },
        { "name": "keyword.operator.arithmetic.vitte", "match": "(\\+|-|\\*|/|%)" },
        { "name": "keyword.operator.assignment.vitte", "match": "(=|\\+=|-=|\\*=|/=)" },
        { "name": "keyword.operator.borrow.vitte", "match": "\\b&mut\\b|&" },
        { "name": "keyword.operator.pointer.vitte", "match": "(\\?|\\*)" },
        { "name": "keyword.operator.path.vitte", "match": "::" },
        { "name": "keyword.operator.arrow.vitte", "match": "->" },
        { "name": "punctuation.separator.comma.vitte", "match": "," },
        { "name": "punctuation.terminator.statement.vitte", "match": ";" },
        { "name": "punctuation.section.braces.begin.vitte", "match": "\\{" },
        { "name": "punctuation.section.braces.end.vitte", "match": "\\}" },
        { "name": "punctuation.section.parens.begin.vitte", "match": "\\(" },
        { "name": "punctuation.section.parens.end.vitte", "match": "\\)" },
        { "name": "punctuation.section.brackets.begin.vitte", "match": "\\[" },
        { "name": "punctuation.section.brackets.end.vitte", "match": "\\]" },
        { "name": "punctuation.separator.colon.vitte", "match": ":" },
        { "name": "punctuation.separator.dot.vitte", "match": "\\." }
      ]
    }
  },
  "uuid": "f8e67c3a-8f5f-41d4-bac5-4c0ce17a7a00"
}
